# fatal: [localhost]: FAILED! => {"msg": "The task includes an option with an undefined variable.. 'dict object' has no attribute 'unarchive_format'\n\nThe error appears to be in '/src/tasks/install_binary.yml': line 1, column 3, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n- set_fact:\n  ^ here\n"}
#
- set_fact:
    app_meta: '{{ app.meta | default({}) }}' # string custom metadata for templating
    app_org: "{{ app.repo.split('/') | first | lower }}"
    app_repo: "{{ app.repo.split('/') | last | lower }}"
    app_separator: "{{ app.separator | default(gri_separator) }}"
    app_archive_extension: '{{ app.archive_extension | default(gri_archive_extension) }}'
    app_archive_key: '{{ app.archive_key | default("") }}'
    app_checksum_key: '{{ app.checksum_key | default("") }}'
    _gri_become_user: "{{ gri_become_user_defaults | combine(gri_become_user, recursive=True) }}"
    app_unarchive_binary_key: '{{ app.unarchive_binary_key | default("") }}'

- set_fact:
    app_archive_format: '{{ gri_archive_formats[app_archive_key] | default(gri_default_archive_format) | trim }}'
    app_binary_name: '{{ app.binary_name | default(app_repo) }}' # binary to name to install from archive
    app_url: '{{ gri_mirror }}/{{ app.repo }}/releases/download/{{ app.tag }}'
    fs_app_install_dir: '{{ gri_parent_install_dir }}/{{ app_repo }}/{{ app.tag }}'
    app_unarchive_format: '{{ app.unarchive_format | default(gri_default_unarchive_format) }}' # default unarchive format options=unarchive|gzip

- set_fact:
    app_checksum_format: '{{ gri_checksum_formats[app_checksum_key] | default(gri_default_checksum_format) | trim }}' # can rely on app_archive_format to resolve checksum format
    app_tgz_url: '{{ app_url }}/{{ app_archive_format }}'
    fs_app_install_exe: '{{ fs_app_install_dir }}/{{ app_binary_name }}'
    fs_app_link: '{{ gri_link_dir }}/{{ app_binary_name }}'
    fs_tmp_tgz: '/tmp/{{ app_archive_format }}'
    app_is_binary: '{{ app_unarchive_format == "binary" }}'

- set_fact:
    app_checksum_url: '{{ app_url }}/{{ app_checksum_format }}'

- debug:
    msg:
      - app_checksum_url={{ app_checksum_url }}
      - app_is_binary={{ app_is_binary }}
      - app_org={{ app_org }}
      - app_repo={{ app_repo }}
      - app_separator={{ app_separator }}
      - app_tag={{ app.tag }}
      - app_tgz_url={{ app_tgz_url }}
      - app_unarchive_format={{ app_unarchive_format }}
      - app_url={{ app_url }}
      - fs_app_install_dir={{ fs_app_install_dir }}
      - fs_app_install_exe={{ fs_app_install_exe }}
      - fs_tmp_tgz={{ fs_tmp_tgz }}

- name: check for {{ fs_app_install_dir }}
  stat:
    path: '{{ fs_app_install_exe }}'
  changed_when: false
  register: app_binary
- when: not app_binary.stat.exists
  block:
    - when: not app_is_binary
      name: resolve checksum
      block:
      # resolve checksum
      - name: get checksums={{ app_checksum_url }}
        uri:
          url: '{{ app_checksum_url }}'
          return_content: yes
        register: checksum_response
      - name: set checksum content fact
        set_fact:
          checksum_content: "{{ checksum_response.content }}"
      - name: resolve checksum
        set_fact:
          checksum: "sha256:{{ item.split()[0] }}"
        when: app_archive_format in item
        with_items: "{{ checksum_content.split('\n') }}"
    - when: app_is_binary
      name: checksum_mode=binary
      set_fact:
        checksum: ''

    # download and install
    - name: download={{ app_tgz_url }}, dest={{ fs_tmp_tgz }}
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      get_url:
        url: '{{ app_tgz_url }}'
        dest: '{{ fs_tmp_tgz }}'
        checksum: '{{ checksum }}'
        mode: 0644 # 0 to unset any sticky bits (argo for example)
    - name: mkdir={{ fs_app_install_dir }}
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      file:
        path: '{{ fs_app_install_dir }}'
        state: directory
        mode: '755'

    # unarchive
    - name: unarchive={{ fs_tmp_tgz }}
      when: app_unarchive_format == "unarchive"
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      unarchive:
        remote_src: true
        src: '{{ fs_tmp_tgz }}'
        dest: '{{ fs_app_install_dir }}'
        creates: '{{ fs_app_install_exe }}'
        mode: '755'
    - name: gzip={{ fs_tmp_tgz }}
      when: app_unarchive_format == "gzip"
      ansible.builtin.command: gunzip -d -N {{ fs_tmp_tgz }}
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
    - name: copy=/tmp/{{ gri_unarchive_binary_formats[app_unarchive_binary_key] }}, dest={{ fs_app_install_exe }}
      when: app_unarchive_format == "gzip"
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      copy:
        src: '/tmp/{{ gri_unarchive_binary_formats[app_unarchive_binary_key] }}'
        dest: '{{ fs_app_install_exe }}'
        mode: '755'
    - name: copy={{ fs_tmp_tgz }}, dest={{ fs_app_install_exe }}
      when: app_is_binary
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      copy:
        src: '{{ fs_tmp_tgz }}'
        dest: '{{ fs_app_install_exe }}'
        mode: '755'

  # cleanup tgz file
  always:
    - name: rm {{ fs_tmp_tgz }}
      when: not app_is_binary
      become: '{{ _gri_become_user.become }}'
      become_user: '{{ _gri_become_user.user }}'
      become_method: '{{ _gri_become_user.method }}'
      file:
        path: '{{ fs_tmp_tgz }}'
        state: absent
- name: link {{ fs_app_link }} to {{ fs_app_install_exe }}
  become: '{{ _gri_become_user.become }}'
  become_user: '{{ _gri_become_user.user }}'
  become_method: '{{ _gri_become_user.method }}'
  file:
    src: '{{ fs_app_install_exe }}'
    dest: '{{ fs_app_link }}'
    state: link
    force: true # override existing symlink
